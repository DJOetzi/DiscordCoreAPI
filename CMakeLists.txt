if (WIN32)
cmake_minimum_required(VERSION 3.22.1)
elseif(UNIX)
cmake_minimum_required(VERSION 3.16.2)
endif()
project(DiscordCoreAPI-DLL)

if (WIN32)
	set(OS_SUFFIX "lib")
	set(VcPkgFolder "C:/vcpkg/installed/x64-windows")
	set(OpenSSLFolder "C:/OpenSSL")
elseif(UNIX)
	set(OS_SUFFIX "a")
	set(VcPkgFolder "$ENV{HOME}/opt/vcpkg/installed/x64-linux/")
	set(OpenSSLFolder "opt/OpenSSL")
endif()

add_compile_definitions(DiscordCoreAPI-DLL)
add_compile_definitions(DISCORDCOREAPIDLL_EXPORTS)

add_link_options(/LTCG)
if (WIN32)
add_compile_options(/sdl)
add_compile_options(/Gm-)
add_compile_options(/Zi )
add_compile_options(/ZW:nostdlib)
add_compile_options(/Zc:wchar_t)
add_compile_options(/Gy)
add_compile_options(/W3)
add_compile_options(/GL)
add_compile_options(/GS)
add_compile_options(/MP)
add_compile_options(/bigobj)
endif()
include_directories(${CMAKE_SOURCE_DIR}/Headers/)
include_directories(${VcPkgFolder}/include)
include_directories(${VcPkgFolder}/lib/glib-2.0/include)
include_directories(${VcPkgFolder}/include/glib-2.0)
include_directories(${OpenSSLFolder}/include)

add_library(DiscordCoreAPI-DLL SHARED "${CMAKE_SOURCE_DIR}/Source/DllMain.cpp")

if (CMAKE_BUILD_TYPE STREQUAL "Release")
add_compile_options(/O2)
endif()

target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ApplicationCommandEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/AudioDecoder.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/AudioEncoder.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ChannelEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/CommandController.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/DataParsingFunctions.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/DiscordCoreClient.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/DiscordCoreClient.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ErlPacker.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/EventManager.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/FoundationEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/GuildEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/GuildMemberEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/GuildScheduledEventEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/Http.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/InputEvents.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/InteractionEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/JSONIfier.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/MessageEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/Nanobench.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ReactionEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/RoleEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/SongAPI.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/SoundCloudAPI.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/SSLClients.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/StageInstanceEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/StickerEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ThreadEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/ThreadPool.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/UserEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/VoiceConnection.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/WebHookEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/WebSocketEntities.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${CMAKE_SOURCE_DIR}/Source/YouTubeAPI.cpp")
target_sources(DiscordCoreAPI-DLL PRIVATE "${VcPkgFolder}/include/cpp-base64/base64.cpp")

target_include_directories(DiscordCoreAPI-DLL PUBLIC ${CMAKE_SOURCE_DIR}/Headers/)
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/libcurl.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/glib-2.0.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/libsodium.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/avutil.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/avcodec.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/swresample.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/avformat.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${VcPkgFolder}/lib/opus.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${OpenSSLFolder}/libcrypto.${OS_SUFFIX})
target_link_libraries(DiscordCoreAPI-DLL ${OpenSSLFolder}/libssl.${OS_SUFFIX})
set_property(TARGET DiscordCoreAPI-DLL PROPERTY CXX_STANDARD 20)
