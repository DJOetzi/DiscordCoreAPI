if ($<CONFIG:RELEASE>)
set(CMAKE_BUILD_TYPE $<$<CONFIG:RELEASE>>"Release")
elseif($<CONFIG:DEBUG>)
set(CMAKE_BUILD_TYPE $<$<CONFIG:DEBUG>>"Debug")
else()
set(CMAKE_BUILD_TYPE "Release")
endif()

if (WIN32)
	set(DISCORD_CORE_API_DLL_DIRECTORY "C:/DiscordCoreAPI-DLL")
	cmake_minimum_required(VERSION 3.21.2)
	set(OUTPUT_FOLDER01 "${CMAKE_SOURCE_DIR}/Output Files/Windows")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_INCLUDES_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_CXX_STANDARD 23)
	set(CMAKE_CXX_STANDARD_REQUIRED True)
	project(DiscordCoreAPI-Bot VERSION 1.00 LANGUAGES CXX)
	set(OS_SUFFIX01 "lib")
	set(OS_SUFFIX02 "dll")
	set(OpenSSLFolder "C:/OpenSSL")
	set(VcPkgFolder "C:/vcpkg/installed/x64-windows/")
	set(VCToolsRedistInstallDir "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64")
	set(VCToolsNonRedistInstallDir "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC/14.30.30704/debug_nonredist/x64/Microsoft.VC143.DebugCRT")
	find_package(OpenSSL)
	add_compile_definitions(DISCORDCOREAPIDLL_EXPORTS)
	add_compile_definitions(_WIN32)
elseif(UNIX)
	set(DISCORD_CORE_API_DLL_DIRECTORY "/usr/DiscordCoreAPI-DLL")
	set(CMAKE_TOOLCHAIN_FILE "$ENV{HOME}/vcpkg/scripts/buildsystems/vcpkg.cmake")
	cmake_minimum_required(VERSION 3.16.1)
	set(CMAKE_CXX_COMPILER "/usr/bin/g++-11")
	add_compile_options(-std=gnu++2b)
	add_compile_options(-fcoroutines)
	add_compile_options(-lcrypto)
	add_compile_options(-lssl)
	set(OUTPUT_FOLDER01 "${CMAKE_SOURCE_DIR}/Output Files/Linux/")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_FOLDER01}")
	set(CMAKE_CXX_STANDARD 20)
	set(CMAKE_CXX_STANDARD_REQUIRED True)
	project(DiscordCoreAPI-Bot VERSION 1.00 LANGUAGES CXX)
	set(OS_SUFFIX01 "a")
	set(OS_SUFFIX02 "so")
	set(OpenSSLFolder "$ENV{HOME}/vcpkg/installed/x64-linux/lib")
	set(VcPkgFolder "$ENV{HOME}/vcpkg/installed/x64-linux")
	set(OPENSSL_ROOT_DIR "OpenSSLFolder")
	find_package(OpenSSL)
	set(VcPkgFolder02 "$ENV{HOME}/vcpkg/installed/x64-linux")
	set(CMAKE_CXX_COMPILER "/usr/bin/g++-11")
	set(OUTPUT_FOLDER ${CMAKE_SOURCE_DIR}/Output Files/Linux/Release)	
	add_compile_definitions(LINUX)
endif()

add_link_options(/LTCG)
add_compile_options(/O2)
add_compile_options(/sdl)
add_compile_options(/Gm-)
add_compile_options(/Zi )
add_compile_options(/ZW:nostdlib)
add_compile_options(/Zc:wchar_t)
add_compile_options(/Gy)
add_compile_options(/W3)
add_compile_options(/GL)
add_compile_options(/GS)
add_compile_options(/MP)
add_compile_options(/bigobj)
include_directories("${VcPkgFolder}/include")
include_directories("${VcPkgFolder}/lib/glib-2.0/include")
include_directories("${VcPkgFolder}/include/cpp-base64/")
include_directories("${OpenSSLFolder}/include")
if (WIN32)
	include(${DISCORD_CORE_API_DLL_DIRECTORY}/DiscordCoreAPI-DLLTargetsRelease.cmake)
	include_directories("${CMAKE_SOURCE_DIR}/Headers/Windows")
	include_directories(${VcPkgFolder}/include)
	include_directories(${VcPkgFolder}/lib/glib-2.0/include)
	include_directories(${VcPkgFolder}/include/glib-2.0/)
	include_directories(${OpenSSLFolder})
	find_path(CPP_BASE64_INCLUDE_DIRS "base64.cpp" "${VcPkgFolder}/include/cpp-base64/")
	find_package(OpenSSL)

	add_executable(DiscordCoreAPI-Bot "${CMAKE_SOURCE_DIR}/main.cpp")
	target_include_directories(DiscordCoreAPI-Bot PUBLIC "${VcPkgFolder}/include" "${OpenSSLFolder}/include")
	#add_library(DiscordCoreAPI-DLL INTERFACE IMPORTED)
	set_property(TARGET DiscordCoreAPI-DLL PROPERTY IMPORTED_LOCATION "C:/DiscordCoreAPI-DLL/Output Files/Release/DiscordCoreAPI-DLL.dll")
	set_property(TARGET DiscordCoreAPI-DLL PROPERTY IMPORTED_IMPLIB "C:/DiscordCoreAPI-DLL/Output Files/Release/DiscordCoreAPI-DLL.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC DiscordCoreAPI-DLL )
	target_include_directories(DiscordCoreAPI-Bot PRIVATE ${CPP_BASE64_INCLUDE_DIRS})
	target_link_directories(DiscordCoreAPI-Bot PUBLIC "${VcPkgFolder}/lib" "${OpenSSLFolder}")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC OpenSSL::SSL)
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC OpenSSL::Crypto)
	add_library(libcurl SHARED IMPORTED GLOBAL)
	set_property(TARGET libcurl PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/libcurl.dll")
	set_property(TARGET libcurl PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/libcurl.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libcurl)
	add_library(libsodium SHARED IMPORTED GLOBAL)
	set_property(TARGET libsodium PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/libsodium.dll")
	set_property(TARGET libsodium PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/libsodium.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libsodium)
	add_library(libglib SHARED IMPORTED GLOBAL)
	set_property(TARGET libglib PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/glib-2.0.dll")
	set_property(TARGET libglib PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/glib-2.0.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libglib)
	add_library(libavutil SHARED IMPORTED GLOBAL)
	set_property(TARGET libavutil PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/avutil.dll")
	set_property(TARGET libavutil PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/avutil.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libavutil)
	add_library(libavcodec SHARED IMPORTED GLOBAL)
	set_property(TARGET libavcodec PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/avcodec.dll")
	set_property(TARGET libavcodec PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/avcodec.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libavcodec)
	add_library(libswresample SHARED IMPORTED GLOBAL)
	set_property(TARGET libswresample PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/swresample.dll")
	set_property(TARGET libswresample PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/swresample.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libswresample)
	add_library(libavformat SHARED IMPORTED GLOBAL)
	set_property(TARGET libavformat PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/avformat.dll")
	set_property(TARGET libavformat PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/avformat.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libavformat)
	add_library(libopus SHARED IMPORTED GLOBAL)
	set_property(TARGET libopus PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/bin/opus.dll")
	set_property(TARGET libopus PROPERTY IMPORTED_IMPLIB "${VcPkgFolder}/lib/opus.lib")
	target_link_libraries(DiscordCoreAPI-Bot PUBLIC libopus)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${VCToolsRedistInstallDir}/msvcp140d_atomic_wait.${OS_SUFFIX02}" "${CMAKE_SOURCE_DIR}/Output Files/Windows/${CMAKE_BUILD_TYPE}/msvcp140d_atomic_wait.${OS_SUFFIX02}")
endif()
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${DISCORD_CORE_API_DLL_DIRECTORY}/Output Files/${CMAKE_BUILD_TYPE}/DiscordCoreAPI-DLL.dll" "${CMAKE_SOURCE_DIR}/Output Files/Windows/${CMAKE_BUILD_TYPE}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${OpenSSLFolder}/libcrypto-3-x64.${OS_SUFFIX02}" "${CMAKE_SOURCE_DIR}/Output Files/Windows/${CMAKE_BUILD_TYPE}/libcrypto-3-x64.${OS_SUFFIX02}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${OpenSSLFolder}/libssl-3-x64.${OS_SUFFIX02}" "${CMAKE_SOURCE_DIR}/Output Files/Windows/${CMAKE_BUILD_TYPE}/libssl-3-x64.${OS_SUFFIX02}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${VCToolsRedistInstallDir}/msvcp140_atomic_wait.${OS_SUFFIX02}" "${CMAKE_SOURCE_DIR}/Output Files/Windows/${CMAKE_BUILD_TYPE}/msvcp140_atomic_wait.${OS_SUFFIX02}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/Output Files/Certs/SoundCloudCert.pem" "C:/SSL/Certs/SoundCloudCert.pem")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/Output Files/Certs/GoogleCert.pem" "C:/SSL/Certs/GoogleCert.pem")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/Output Files/Certs/DiscordCert.pem" "C:/SSL/Certs/DiscordCert.pem")
elseif (UNIX)
	if (CMAKE_BUILD_TYPE STREQUAL "Release")
		include(${DISCORD_CORE_API_DLL_DIRECTORY}/DiscordCoreAPI-DLLTargetsRelease.cmake)
	else()
		include(${DISCORD_CORE_API_DLL_DIRECTORY}/DiscordCoreAPI-DLLTargetsDebug.cmake)
	endif()
	add_executable(DiscordCoreAPI-Bot main.cpp)
	target_link_libraries(DiscordCoreAPI-Bot DiscordCoreAPI-DLL)
	add_compile_options("-DCMAKE_TOOLCHAIN_FILE=$ENV{HOME}/vcpkg/scripts/buildsystems/vcpkg.cmake")
	include_directories("${CMAKE_SOURCE_DIR}/Headers/Linux")
	include_directories("/usr/include/x86_64-linux-gnu/")
	target_include_directories(DiscordCoreAPI-DLL PUBLIC "${VcPkgFolder/include}" "${OpenSSLFolder}/include")

	add_library(DiscordCoreAPI-DLL "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/DllMain.cpp" "${VcPkgFolder}/include/cpp-base64/base64.cpp"				"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ApplicationCommandEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/AudioDecoder.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/AudioEncoder.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ChannelEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/CommandController.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/DataParsingFunctions.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/DiscordCoreClient.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/DiscordCoreClient.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ErlPacker.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/EventManager.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/FoundationEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/GuildEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/GuildMemberEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/GuildScheduledEventEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/Http.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/InputEvents.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/InteractionEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/JSONIfier.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/MessageEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ReactionEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/RoleEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/SongAPI.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/SoundCloudAPI.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/SSLClients.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/StageInstanceEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/StickerEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ThreadEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/ThreadPool.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/UserEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/VoiceConnection.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/WebHookEntities.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/WebSocketEntities.cpp"
	"${CMAKE_CURRENT_SOURCE_DIR}/Source/Linux/YouTubeAPI.cpp"
	)
	
	target_include_directories(DiscordCoreAPI-DLL PUBLIC "${VcPkgFolder/include}" "${OpenSSLFolder}")	

	target_link_directories(DiscordCoreAPI-DLL PUBLIC "${VcPkgFolder/lib}" "${OpenSSLFolder}")
	add_library(libcrypto SHARED IMPORTED GLOBAL)
	set_property(TARGET libcrypto PROPERTY IMPORTED_LOCATION "${OpenSSLFolder}/libcrypto.so")
	set_property(TARGET libcrypto PROPERTY IMPORTED_IMPLIB "${OpenSSLFolder}/libcrypto.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libcrypt)
	add_library(libssl SHARED IMPORTED GLOBAL)
	set_property(TARGET libssl PROPERTY IMPORTED_LOCATION "${OpenSSLFolder}/libssl.so")
	set_property(TARGET libssl PROPERTY IMPORTED_IMPLIB "${OpenSSLFolder}/libssl.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libssl)
	add_library(libcurl STATIC IMPORTED GLOBAL)
	set_property(TARGET libcurl PROPERTY IMPORTED_LOCATION  "${VcPkgFolder}/lib/libcurl.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libcurl)
	add_library(libsodium STATIC IMPORTED GLOBAL)
	set_property(TARGET libsodium PROPERTY IMPORTED_LOCATION  "${VcPkgFolder}/lib/libsodium.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libsodium)
	add_library(libglib STATIC IMPORTED GLOBAL)
	set_property(TARGET libglib PROPERTY IMPORTED_LOCATION  "${VcPkgFolder}/lib/libglib-2.0.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libglib)
	add_library(libavutil STATIC IMPORTED GLOBAL)
	set_property(TARGET libavutil PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/lib/libavutil.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libavutil)
	add_library(libavcodec STATIC IMPORTED GLOBAL)
	set_property(TARGET libavcodec PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/lib/libavcodec.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libavcodec)
	add_library(libswresample STATIC IMPORTED GLOBAL)
	set_property(TARGET libswresample PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/lib/libswresample.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libswresample)
	add_library(libavformat STATIC IMPORTED GLOBAL)
	set_property(TARGET libavformat PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/lib/libavformat.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libavformat)
	add_library(libopus STATIC IMPORTED GLOBAL)
	set_property(TARGET libopus PROPERTY IMPORTED_LOCATION "${VcPkgFolder}/lib/libopus.a")
	target_link_libraries(DiscordCoreAPI-DLL PUBLIC libopus)
link_libraries(DiscordCoreAPI-Bot "${CMAKE_SOURCE_DIR}/Output Files/Linux/${CMAKE_BUILD_TYPE}/libDiscordCoreAPI-DLL.${OS_SUFFIX02}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${VcPkgFolder}/lib/libz.${OS_SUFFIX01}" "${CMAKE_SOURCE_DIR}/Output Files/Linux/${CMAKE_BUILD_TYPE}/libz.${OS_SUFFIX01}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${VcPkgFolder}/lib/libcurl.${OS_SUFFIX01}" "${CMAKE_SOURCE_DIR}/Output Files/Linux/${CMAKE_BUILD_TYPE}/libcurl.${OS_SUFFIX01}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${OpenSSLFolder}/lib/libcrypto.${OS_SUFFIX01}" "${CMAKE_SOURCE_DIR}/Output Files/Linux/${CMAKE_BUILD_TYPE}/libcrypto.${OS_SUFFIX01}")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND POST_BUILD ${CMAKE_COMMAND} -E copy "${OpenSSLFolder}/lib/libssl.${OS_SUFFIX01}" "${CMAKE_SOURCE_DIR}/Output Files/Linux/${CMAKE_BUILD_TYPE}/libssl.${OS_SUFFIX01}")
endif()
