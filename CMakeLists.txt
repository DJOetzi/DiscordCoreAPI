cmake_minimum_required(VERSION 3.1)
project(DiscordCoreAPI-Bot)

add_compile_definitions(DiscordCoreAPI-Bot)

add_executable(DiscordCoreAPI-Bot ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)

set(VcPkgFolder "C:/vcpkg/installed/x64-windows")
set(OpenSSLFolder "C:/OpenSSL")
set(VCToolsRedistInstallDir "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64")

add_link_options(/LTCG)
add_compile_options(/sdl)
add_compile_options(/Gm-)
add_compile_options(/Zi )
add_compile_options(/ZW:nostdlib)
add_compile_options(/Zc:wchar_t)
add_compile_options(/Gy)
add_compile_options(/W3)
add_compile_options(/GL)
add_compile_options(/GS)
add_compile_options(/MP)
add_compile_options(/bigobj)
include_directories(${CMAKE_SOURCE_DIR}/Headers/)

target_compile_definitions(DiscordCoreAPI-Bot PRIVATE $<$<CONFIG:Release>:RELEASE_BUILD>)
target_compile_definitions(DiscordCoreAPI-Bot PRIVATE $<$<CONFIG:Debug>:DEBUG_BUILD>)

if (CMAKE_BUILD_TYPE STREQUAL "Release")
add_compile_options(/O2)
set_target_properties(DiscordCoreAPI-Bot PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/Output Files")
else()
set_target_properties(DiscordCoreAPI-Bot PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/Output Files")
endif()

include_directories(${VcPkgFolder}/include)
include_directories(${VcPkgFolder}/lib/glib-2.0/include)
include_directories(${OpenSSLFolder}/include)

target_include_directories(DiscordCoreAPI-Bot PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/Headers/)

target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/libcurl.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/glib-2.0.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/libsodium.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/avutil.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/avcodec.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/swresample.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/avformat.lib)
target_link_libraries(DiscordCoreAPI-Bot ${VcPkgFolder}/lib/opus.lib)
target_link_libraries(DiscordCoreAPI-Bot ${OpenSSLFolder}/libcrypto.lib)
target_link_libraries(DiscordCoreAPI-Bot ${OpenSSLFolder}/libssl.lib)
set_property(TARGET DiscordCoreAPI-Bot PROPERTY CXX_STANDARD 23)
if (CMAKE_BUILD_TYPE STREQUAL "Release")
target_link_libraries(DiscordCoreAPI-Bot "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release/DiscordCoreAPI-DLL.lib")
file(COPY ${VcPkgFolder}/bin/libcurl.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release")
file(COPY ${VcPkgFolder}/bin/zlib1.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release")
file(COPY ${OpenSSLFolder}/libcrypto-3-x64.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release")
file(COPY ${OpenSSLFolder}/libssl-3-x64.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release")
SET(Msvcp140ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release/msvcp140_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/msvcp140.dll ${Msvcp140ToPath})
SET(Msvcp140AtomicWaitToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release/msvcp140_atomic_wait_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/msvcp140_atomic_wait.dll ${Msvcp140AtomicWaitToPath})
SET(VCRuntime140ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release/vcruntime140_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/vcruntime140.dll ${VCRuntime140ToPath})
SET(VCRuntime1401ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Release/vcruntime140_1_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/vcruntime140_1.dll ${VCRuntime1401ToPath})
else()
target_link_libraries(DiscordCoreAPI-Bot "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug/DiscordCoreAPI-DLL.lib")
file(COPY ${VcPkgFolder}/bin/zlib1.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug")
file(COPY ${VcPkgFolder}/bin/libcurl.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug")
file(COPY ${OpenSSLFolder}/libcrypto-3-x64.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug")
file(COPY ${OpenSSLFolder}/libssl-3-x64.dll DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug")
SET(Msvcp140ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug/msvcp140_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/msvcp140.dll ${Msvcp140ToPath})
SET(Msvcp140AtomicWaitToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug/msvcp140_atomic_wait_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/msvcp140_atomic_wait.dll ${Msvcp140AtomicWaitToPath})
SET(VCRuntime140ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug/vcruntime140_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/vcruntime140.dll ${VCRuntime140ToPath})
SET(VCRuntime1401ToPath "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Debug/vcruntime140_1_app.dll")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy ${VCToolsRedistInstallDir}/vcruntime140_1.dll ${VCRuntime1401ToPath})
endif()

ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Certs/SoundCloudCert.pem" "C:/SSL/Certs/SoundCloudCert.pem")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Certs/GoogleCert.pem" "C:/SSL/Certs/GoogleCert.pem")
ADD_CUSTOM_COMMAND(TARGET DiscordCoreAPI-Bot COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/Output Files/Certs/DiscordCert.pem" "C:/SSL/Certs/DiscordCert.pem")